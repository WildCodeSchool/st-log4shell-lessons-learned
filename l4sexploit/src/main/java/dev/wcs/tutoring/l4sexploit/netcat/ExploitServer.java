package dev.wcs.tutoring.l4sexploit.netcat;

import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.nio.charset.StandardCharsets;

public class ExploitServer implements Runnable {

    private static int port = 9001;

    public static void main(String[] args) {
        if (args.length == 1) {
            port = Integer.parseInt(args[0]);
        }
        Runnable exploitServer = new ExploitServer();
        exploitServer.run();
    }
 
    @Override
    public void run() {
        try (ServerSocket serverSocket = new ServerSocket(port)) {
            System.out.println("Server is listening on port " + port);
            boolean appExit = false;
            while (!appExit) {
                Socket socket = serverSocket.accept();
                System.out.println("New client connected");

                InputStream input = socket.getInputStream();
                OutputStream output = socket.getOutputStream();
                InputStream stdIn = System.in;

                boolean connExit = false;
                do {
                    while (stdIn.available() > 0) {
                        byte[] outputs = new byte[stdIn.available()];
                        stdIn.read(outputs);
                        if (new String(outputs, StandardCharsets.UTF_8).trim().equals("exit")) {
                            connExit = true;
                        } else if (new String(outputs, StandardCharsets.UTF_8).trim().equals("quit")) {
                            connExit = true;
                            appExit = true;
                        } else {
                            output.write(outputs);
                        }
                    }
                    while (input.available() > 0) {
                        byte[] inputs = new byte[input.available()];
                        input.read(inputs);
                        System.out.print(new String(inputs, StandardCharsets.UTF_8));
                    }
                } while (!connExit && !appExit);
                socket.close();
            }
        } catch (IOException ex) {
            System.out.println("Server exception: " + ex.getMessage());
            ex.printStackTrace();
        }
    }
}